#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('CIJS-Socket.io:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '6969');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);

var id = 0;
var clients = new Array();
io.on('connection', function (socket) {
    var newTank;
    socket.on('update_tanker_shot', function (data) {
        socket.broadcast.emit('other_player_connected', {idTank: id});
    });
    socket.on('die', function (data) {
        socket.broadcast.emit('die_server', data);
    });
    socket.on('update_tanker', function (data) {
        socket.broadcast.emit('update_tanker_server', data);
    });
    socket.on('update_tanker_shot', function (data) {
        //socket.emit('update_tanker_shot_server', data);
        io.sockets.emit('update_tanker_shot_server', data);
    });
    socket.on('close', function (data) {
        socket.broadcast.emit('update_tanker_delete_server', data);
    });
    socket.on('disconnect', function () {
        socket.broadcast.emit('update_tanker_delete_server', newTank);
    });
    socket.on('login', function(data){
        id++;
        newTank = {idTank: id,x : Math.floor((Math.random() * 300) + 20), y : Math.floor((Math.random() * 200) + 20), name: data.name};
        socket.emit('player_connected',newTank);
        socket.broadcast.emit('other_player_connected', newTank);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
